@page "/inventory"
@layout MainLayout
@using dotnetfashionassistant.Models
@using dotnetfashionassistant.Components.Layout
@using dotnetfashionassistant.Services
@using dotnetfashionassistant.Components
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CartUpdateService CartUpdateService
@inject InventoryFilterService InventoryFilterService
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Online Store Inventory</PageTitle>

<div class="main-layout">
    <!-- Left side: Inventory -->
    <div class="inventory-section">
        @if (showSuccessToast)
        {
            <div class="position-fixed top-0 start-0 w-100 p-0 mt-navbar" style="z-index: 1040">
                <div class="toast show mx-auto bg-success text-white" role="alert" aria-live="assertive" aria-atomic="true" style="max-width: 600px;">
                    <div class="toast-header bg-success text-white">
                        <strong class="me-auto">Success</strong>
                        <button type="button" class="btn-close btn-close-white" @onclick="() => showSuccessToast = false" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-check-circle-fill me-2" style="font-size: 1.5rem;"></i>
                            <div>
                                <strong>Item added to cart successfully!</strong>
                                <div class="mt-1">@lastAddedItem</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="inventory-container">
            <div class="inventory-header">
                <h1>Online Store</h1>
                <p class="lead text-muted">Browse our latest collection of premium items</p>

                @if (InventoryFilterService.IsFilterActive)
                {
                    <div class="alert alert-info alert-dismissible fade show d-flex align-items-center justify-content-between" role="alert">
                        <div>
                            <i class="bi bi-funnel-fill me-2"></i>
                            <strong>AI Filter Active:</strong> Showing @displayedInventory.Count of @inventory.Count products based on AI assistant recommendations
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ClearFilter">
                            <i class="bi bi-x-circle me-1"></i>Show All
                        </button>
                    </div>
                }
                
                @if (errorMessage != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
                    </div>
                }    
            </div>

            @if (InventoryFilterService.IsFilterActive && displayedInventory.Count == 0)
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle-fill me-2"></i>
                    No products match the AI assistant's recommendations. Try asking for different products.
                </div>
            }

            <div class="product-grid">
                @foreach (var item in displayedInventory)
                {
                    <div class="product-card">
                        <div class="product-image">
                            <img src="@GetProductImageUrl(item.ProductId)" alt="@item.ProductName" />
                        </div>                
                        <div class="product-info">
                            <div class="product-name-container">
                                <h3 class="product-name">@item.ProductName</h3>
                                <button class="copy-product-name-btn" 
                                        title="商品名をコピー"
                                        @onclick="@(() => CopyProductNameToClipboard(item.ProductName))">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                            </div>
                            <div class="product-price">$@item.Price.ToString("0.00")</div>
                              <div class="product-sizes">
                                <span class="size-label">Available Sizes:</span>
                                <div class="size-badges">
                                    @foreach (var sizeEntry in item.SizeInventory)
                                    {
                                        @if (sizeEntry.Value > 0)
                                        {
                                            <span class="size-badge @GetStockLevelClass(sizeEntry.Value)">
                                                @sizeEntry.Key <span class="size-count">(@sizeEntry.Value)</span>
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="size-badge out-of-stock">@sizeEntry.Key <span class="size-count">(0)</span></span>
                                        }
                                    }
                                </div>
                            </div>
                            
                            <div class="product-actions">
                                @{
                                    var availableSizes = GetAvailableSizes(item);
                                    var hasSizes = availableSizes.Count > 0;
                                }
                                <div class="select-wrapper">
                                    <select class="form-select" 
                                            @bind="selectedSizes[item.ProductId]" 
                                            disabled="@(!hasSizes)">
                                        <option value="">@(hasSizes ? "Select Size" : "No Sizes Available")</option>
                                        @foreach (var size in availableSizes)
                                        {
                                            <option value="@size">@size</option>
                                        }
                                    </select>
                                </div>
                                
                                <div class="quantity-wrapper">
                                    <div class="input-group">
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => DecreaseQuantity(item.ProductId)">-</button>
                                        <input type="number" class="form-control text-center" 
                                              value="@GetQuantity(item.ProductId)" 
                                              @onchange="@(e => UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                              min="1" max="99" />
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => IncreaseQuantity(item.ProductId)">+</button>
                                    </div>
                                </div>
                                
                                <button class="btn btn-primary add-to-cart" 
                                        @onclick="() => AddToCart(item)" 
                                        disabled="@(!CanAddToCart(item))">
                                    <i class="bi bi-cart-plus"></i> Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Right side: Chat Assistant -->
    <div class="chat-section">
        <ChatComponent />
    </div>
</div>

<style>
    .main-layout {
        display: flex;
        height: calc(100vh - 120px); /* Adjust for header height */
        gap: 1rem;
        padding: 1rem;
        max-width: 100%;
        overflow: hidden;
    }

    .inventory-section {
        flex: 1;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .chat-section {
        width: 400px;
        flex-shrink: 0;
        height: 100%;
        border-left: 1px solid #e0e0e0;
        padding-left: 1rem;
    }

    .inventory-container {
        max-width: none;
        margin: 0;
        padding: 0;
    }
    
    .inventory-header {
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .inventory-header h1 {
        font-size: 2.2rem;
        margin-bottom: 0.5rem;
        color: #003057;
    }
    
    .inventory-legend {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
    }
    
    .product-card {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        background-color: white;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .product-image {
        height: 180px;
        overflow: hidden;
        background-color: #f5f5f5;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s;
    }
    
    .product-card:hover .product-image img {
        transform: scale(1.05);
    }
    
    .product-info {
        padding: 1.2rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }
      
    .product-name-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        gap: 0.5rem;
    }
      
    .product-name {
        font-size: 1.0rem;
        font-weight: 600;
        margin: 0;
        color: #1a1a1a;
        min-height: 2.2rem;
        flex-grow: 1;
    }
    
    .copy-product-name-btn {
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.25rem;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        flex-shrink: 0;
    }
    
    .copy-product-name-btn:hover {
        background-color: #e9ecef;
        color: #0d6efd;
        transform: scale(1.1);
    }
    
    .copy-product-name-btn:active {
        transform: scale(0.95);
    }
    
    .copy-product-name-btn.copy-success {
        color: #198754;
    }
    
    .product-price {
        font-size: 1.1rem;
        font-weight: 700;
        color: #003057;
        margin-bottom: 1rem;
    }
    
    .product-sizes {
        margin-bottom: 1rem;
    }
    
    .size-label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        color: #555;
        font-weight: 500;
    }
    
    .size-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.4rem;
    }
    
    .size-badge {
        display: inline-block;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .out-of-stock {
        background-color: #e0e0e0;
        color: #888;
        text-decoration: line-through;
    }
    
    .product-actions {
        margin-top: auto;
        display: flex;
        flex-direction: column;
        gap: 0.6rem;
    }
    
    .select-wrapper {
        margin-bottom: 0.4rem;
    }
    
    .quantity-wrapper {
        margin-bottom: 0.6rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 1200px) {
        .chat-section {
            width: 350px;
        }
        
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 992px) {
        .main-layout {
            flex-direction: column;
            height: auto;
        }
        
        .chat-section {
            width: 100%;
            height: 400px;
            border-left: none;
            border-top: 1px solid #e0e0e0;
            padding-left: 0;
            padding-top: 1rem;
        }
        
        .inventory-section {
            padding-right: 0;
        }
    }

    @@media (max-width: 768px) {
        .main-layout {
            padding: 0.5rem;
        }
        
        .inventory-header h1 {
            font-size: 1.8rem;
        }
        
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 1rem;
        }
        
        .chat-section {
            height: 350px;
        }
    }
    
    .quantity-wrapper .input-group {
        width: 100%;
        max-width: 150px;
        margin: 0 auto;
    }
    
    .add-to-cart {
        padding: 0.5rem 1rem;
        font-weight: 500;
        width: 100%;
    }
    
    .btn-primary {
        background-color: #003057;
        border-color: #003057;
    }
    
    .btn-primary:hover:not(:disabled) {
        background-color: #004880;
        border-color: #004880;
    }
    
    .btn-primary:disabled {
        background-color: #99b3c7;
        border-color: #99b3c7;
    }
    
    /* Stock level colors */
    .bg-success, .bg-success-light {
        background-color: #4caf50 !important;
    }
    
    .bg-warning, .bg-warning-light {
        background-color: #ff9800 !important;
    }
    
    .bg-danger, .bg-danger-light {
        background-color: #f44336 !important;
    }
      /* Toast notification positioning below navbar */
    .mt-navbar {
        margin-top: 80px;
    }
    
    @@media (max-width: 768px) {
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
        
        .inventory-header h1 {
            font-size: 2rem;
        }
    }

    .input-group {
        display: flex;
    }
    
    .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.375rem 0.75rem;
        background-color: #fff;
        color: #212529;
    }
    
    .quantity-wrapper .input-group {
        max-width: 140px;
    }
    
    .btn {
        padding: 0.375rem 0.75rem;
        border: 1px solid transparent;
        border-radius: 0.375rem;
        cursor: pointer;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-weight: 400;
        line-height: 1.5;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
    }
    
    .add-to-cart {
        width: 100%;
        gap: 0.5rem;
    }
    
    .btn-primary {
        color: #fff;
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    .btn-primary:hover:not(:disabled) {
        background-color: #0b5ed7;
        border-color: #0a58ca;
    }
    
    .btn-primary:disabled {
        background-color: #6c757d;
        border-color: #6c757d;
        cursor: not-allowed;
    }
    
    .btn-outline-secondary {
        color: #6c757d;
        background-color: transparent;
        border-color: #6c757d;
    }
    
    .btn-outline-secondary:hover {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }
    
    .form-select {
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        background-color: #fff;
        color: #212529;
    }
    
    .form-select:disabled {
        background-color: #e9ecef;
        opacity: 1;
    }
    
    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.375rem;
    }
    
    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .alert-info {
        color: #055160;
        background-color: #cff4fc;
        border-color: #b6effb;
    }
    
    .btn-close {
        background: transparent url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='m.235 1.027 1.027-.235 6.238 6.238 6.238-6.238 1.027.235-.235 1.027L8.292 8.292l6.238 6.238-.235 1.027-1.027-.235L7.03 9.084.792 15.322l-1.027-.235.235-1.027L6.238 7.822.235 1.584z'/%3e%3c/svg%3e") center/1em auto no-repeat;
        border: 0;
        padding: 0.25rem 0.25rem;
        width: 1em;
        height: 1em;
        opacity: 0.5;
    }
    
    .btn-close:hover {
        opacity: 0.75;
    }
    
    .size-count {
        font-size: 0.7rem;
        opacity: 0.8;
    }
    
    .bg-success {
        background-color: #198754 !important;
        color: white !important;
    }
    
    .bg-warning {
        background-color: #ffc107 !important;
        color: black !important;
    }
    
    .bg-danger {
        background-color: #dc3545 !important;
        color: white !important;
    }
    
    .toast {
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    
    .toast-header {
        padding: 0.5rem 0.75rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .toast-body {
        padding: 0.75rem;
    }
</style>

@code {
    private List<InventoryItem> inventory = null!;
    private List<InventoryItem> displayedInventory = null!;
    private Dictionary<int, string> selectedSizes = new Dictionary<int, string>();
    private Dictionary<int, int> quantities = new Dictionary<int, int>();
    private bool showSuccessToast = false;
    private string? errorMessage = null;
    private HttpClient client = null!;
    private string lastAddedItem = "";

    protected override void OnInitialized()
    {
        inventory = InventoryService.GetInventory();
        client = HttpClientFactory.CreateClient("LocalApi");
        
        // Initialize size selections and quantities
        foreach (var item in inventory)
        {
            selectedSizes[item.ProductId] = "";
            quantities[item.ProductId] = 1;
        }
        
        // Apply initial filter
        ApplyFilter();
        
        // Subscribe to filter changes
        InventoryFilterService.OnFilterChanged += OnFilterChanged;
    }

    private void OnFilterChanged()
    {
        ApplyFilter();
        InvokeAsync(StateHasChanged);
    }

    private void ApplyFilter()
    {
        if (InventoryFilterService.IsFilterActive && InventoryFilterService.FilteredProductIds.Count > 0)
        {
            // Filter inventory to show only products in the filter list
            displayedInventory = inventory
                .Where(item => InventoryFilterService.FilteredProductIds.Contains(item.ProductId))
                .ToList();
        }
        else
        {
            // Show all inventory
            displayedInventory = inventory;
        }
    }

    private void ClearFilter()
    {
        InventoryFilterService.ClearFilter();
    }

    public void Dispose()
    {
        // Unsubscribe from filter changes
        InventoryFilterService.OnFilterChanged -= OnFilterChanged;
    }

    private string GetStockLevelClass(int count)
    {
        if (count == 0)
            return "out-of-stock";
        if (count < 6)
            return "bg-danger";
        if (count <= 15)
            return "bg-warning";
        return "bg-success";
    }
    
    private List<string> GetAvailableSizes(InventoryItem item)
    {
        return item.SizeInventory
            .Where(s => s.Value > 0)
            .Select(s => s.Key)
            .ToList();
    }
    
    private bool CanAddToCart(InventoryItem item)
    {
        if (!selectedSizes.TryGetValue(item.ProductId, out var selectedSize))
            return false;
            
        if (string.IsNullOrEmpty(selectedSize) || 
            !item.SizeInventory.TryGetValue(selectedSize, out var stock)) 
            return false;
            
        int qty = GetQuantity(item.ProductId);
        return stock >= qty;
    }
    
    private int GetQuantity(int productId)
    {
        if (quantities.TryGetValue(productId, out int qty))
            return qty;
            
        quantities[productId] = 1;
        return 1;
    }
    
    private void IncreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty < 99) // Set a reasonable upper limit
        {
            quantities[productId] = currentQty + 1;
        }
    }
    
    private void DecreaseQuantity(int productId)
    {
        int currentQty = GetQuantity(productId);
        if (currentQty > 1)
        {
            quantities[productId] = currentQty - 1;
        }
    }
    
    private void UpdateQuantity(int productId, int quantity)
    {
        // Ensure quantity is within valid range
        if (quantity < 1) 
            quantity = 1;
        if (quantity > 99)
            quantity = 99;
            
        quantities[productId] = quantity;
    }
      private string GetProductImageUrl(int productId)
    {
        // Map product IDs to specific image files that match the product descriptions
        switch (productId)
        {
            case 3:
                return "/images/products/navy-blazer.jpeg"; // Navy Single-Breasted Slim Fit Formal Blazer
            case 111:
                return "/images/products/white-navy-shirt.jpeg"; // White & Navy Blue Slim Fit Printed Casual Shirt
            case 116:
                return "/images/products/red-checked-shirt.jpeg"; // Red Slim Fit Checked Casual Shirt
            case 10:
                return "/images/products/denim-jacket.jpeg"; // Navy Blue Washed Denim Jacket
            case 200:
                return "/images/products/product_200.png"; // Organic Fresh Strawberries
            case 201:
                return "/images/products/product_201.png"; // Whole Grain Artisan Bread
            case 202:
                return "/images/products/product_202.png"; // Extra Virgin Olive Oil
            case 203:
                return "/images/products/product_203.png"; // Organic Free-Range Eggs
            case 204:
                return "/images/products/product_204.png"; // Grass-Fed Ground Beef
            case 205:
                return "/images/products/product_205.png"; // Wild Alaskan Salmon Fillet
            case 206:
                return "/images/products/product_206.png"; // Organic Mixed Greens Salad
            case 207:
                return "/images/products/product_207.png"; // Aged Cheddar Cheese
            case 208:
                return "/images/products/product_208.png"; // Greek Style Yogurt
            case 209:
                return "/images/products/product_209.png"; // Organic Honey
            case 300:
                return "/images/products/product_300.png"; // Wireless Bluetooth Headphones
            case 301:
                return "/images/products/product_301.png"; // Smart Fitness Watch
            case 302:
                return "/images/products/product_302.png"; // Portable Power Bank 20000mAh
            case 303:
                return "/images/products/product_303.png"; // 4K Webcam with Microphone
            case 304:
                return "/images/products/product_304.png"; // Wireless Gaming Mouse
            case 400:
                return "/images/products/product_400.png"; // Stainless Steel Coffee Maker
            case 401:
                return "/images/products/product_401.png"; // Non-Stick Cookware Set 10-Piece
            case 402:
                return "/images/products/product_402.png"; // Electric Kettle 1.7L
            case 403:
                return "/images/products/product_403.png"; // Memory Foam Pillow Set
            case 404:
                return "/images/products/product_404.png"; // Robot Vacuum Cleaner
            case 500:
                return "/images/products/product_500.png"; // Best-Selling Mystery Novel
            case 501:
                return "/images/products/product_501.png"; // Complete Cookbook Collection
            case 502:
                return "/images/products/product_502.png"; // Premium Leather Journal
            case 503:
                return "/images/products/product_503.png"; // Educational Science Kit
            case 600:
                return "/images/products/product_600.png"; // Yoga Mat with Carrying Strap
            case 601:
                return "/images/products/product_601.png"; // Adjustable Dumbbell Set
            case 602:
                return "/images/products/product_602.png"; // Camping Tent 4-Person
            case 603:
                return "/images/products/product_603.png"; // Professional Jump Rope
            case 604:
                return "/images/products/product_604.png"; // Insulated Water Bottle 32oz
            case 700:
                return "/images/products/product_700.png"; // Natural Face Moisturizer
            case 701:
                return "/images/products/product_701.png"; // Electric Toothbrush Set
            case 702:
                return "/images/products/product_702.png"; // Aromatherapy Essential Oil Set
            case 703:
                return "/images/products/product_703.png"; // Hair Styling Tool Set
            case 800:
                return "/images/products/product_800.png"; // Strategy Board Game
            case 801:
                return "/images/products/product_801.png"; // Building Blocks Set 1000 Pieces
            case 802:
                return "/images/products/product_802.png"; // Remote Control Racing Car
            case 803:
                return "/images/products/product_803.png"; // Art Supplies Drawing Set
            default:
                // Fallback to a placeholder if the product ID is not recognized
                return $"https://picsum.photos/seed/{productId}/400/228";
        }
    }
    
    private async Task AddToCart(InventoryItem item)
    {
        errorMessage = null;
        if (!selectedSizes.TryGetValue(item.ProductId, out var size) || string.IsNullOrEmpty(size))
        {
            errorMessage = "Please select a size first";
            return;
        }
        
        int quantity = GetQuantity(item.ProductId);
        
        // Check if enough stock is available
        if (!item.SizeInventory.TryGetValue(size, out int stock) || stock < quantity)
        {
            errorMessage = $"Not enough stock. Only {stock} items available";
            return;
        }
        
        try
        {
            var request = new 
            {
                ProductId = item.ProductId,
                Size = size,
                Quantity = quantity
            };
            
            var response = await client.PostAsJsonAsync("api/Cart/add", request);
            
            if (response.IsSuccessStatusCode)
            {
                // Set the details of the last added item for the toast notification
                lastAddedItem = $"{quantity} x {item.ProductName} (Size: {size})";
                showSuccessToast = true;
                
                // Reset quantity to 1 after successful add
                quantities[item.ProductId] = 1;
                
                // Update cart counter immediately using JavaScript interop
                await UpdateCartCounterDisplay(response);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add item to cart: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
      private async Task UpdateCartCounterDisplay(HttpResponseMessage response)
    {
        try
        {
            // Get the updated cart summary from the API response
            var cartSummary = await response.Content.ReadFromJsonAsync<CartSummary>();
            
            // Calculate the new cart count
            int newCount = cartSummary?.Items?.Sum(item => item.Quantity) ?? 0;
            
            // Use JavaScript interop to update the cart badge in real-time
            await JSRuntime.InvokeVoidAsync("updateCartBadge", newCount);
            
            // Notify other components (like MainLayout) about cart update
            CartUpdateService.NotifyCartUpdated();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating cart counter: {ex.Message}");
            // Silently fail if we can't update the counter
        }
    }
    
    private async Task CopyProductNameToClipboard(string productName)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", productName);
            
            // 成功通知を表示（一時的にボタンの色を変更）
            var escapedProductName = productName.Replace("'", "\\'").Replace("\"", "\\\"");
            await JSRuntime.InvokeVoidAsync("eval", $@"
                // 該当する商品のコピーボタンを見つけて成功状態に変更
                const productCards = document.querySelectorAll('.product-card');
                productCards.forEach(card => {{
                    const productNameElement = card.querySelector('.product-name');
                    const copyBtn = card.querySelector('.copy-product-name-btn');
                    if (productNameElement && copyBtn && productNameElement.textContent.trim() === '{escapedProductName}') {{
                        copyBtn.classList.add('copy-success');
                        copyBtn.innerHTML = '<i class=""bi bi-check""></i>';
                        setTimeout(() => {{
                            copyBtn.classList.remove('copy-success');
                            copyBtn.innerHTML = '<i class=""bi bi-clipboard""></i>';
                        }}, 1500);
                    }}
                }});
            ");
        }
        catch (Exception)
        {
            // フォールバック：クリップボードAPIが使用できない場合
            var escapedProductName = productName.Replace("'", "\\'").Replace("\"", "\\\"");
            await JSRuntime.InvokeVoidAsync("eval", $@"
                const textArea = document.createElement('textarea');
                textArea.value = '{escapedProductName}';
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('商品名「{escapedProductName}」をクリップボードにコピーしました！');
            ");
        }
    }
}
